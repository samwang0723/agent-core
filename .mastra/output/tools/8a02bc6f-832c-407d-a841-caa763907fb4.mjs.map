{"version":3,"file":"8a02bc6f-832c-407d-a841-caa763907fb4.mjs","sources":["../../../src/mastra/tools/remote/mcp.repository.ts"],"sourcesContent":["import { Tool } from '@mastra/core';\nimport { McpServerConfig } from './mcp.dto';\nimport { McpClient } from './mcp.service';\nimport logger from '../../utils/logger';\nimport { z } from 'zod';\n\nexport class McpRegistry {\n  private clients: Map<string, McpClient> = new Map();\n  private allTools: Map<string, Tool<z.ZodType>> = new Map();\n  private toolsByServer: Map<string, Map<string, Tool<z.ZodType>>> = new Map();\n\n  constructor(private configs: McpServerConfig[]) {}\n\n  async initialize(): Promise<void> {\n    const initPromises = this.configs.map(config =>\n      this.initializeClient(config)\n    );\n\n    // Initialize all clients in parallel\n    const results = await Promise.allSettled(initPromises);\n\n    // Log results\n    results.forEach((result, index) => {\n      const config = this.configs[index];\n      if (result.status === 'rejected') {\n        logger.error(\n          `Failed to initialize MCP client for ${config.name}:`,\n          result.reason\n        );\n      }\n    });\n\n    logger.info(\n      `MCP Registry initialized with ${this.clients.size} active clients and ${this.allTools.size} total tools`\n    );\n  }\n\n  private async initializeClient(config: McpServerConfig): Promise<void> {\n    if (!config.enabled) {\n      logger.info(`Skipping disabled MCP server: ${config.name}`);\n      return;\n    }\n\n    try {\n      const client = new McpClient(config);\n      await client.initialize();\n\n      this.clients.set(config.name, client);\n\n      // Initialize server-specific tools map\n      const serverTools = new Map<string, Tool<z.ZodType>>();\n      this.toolsByServer.set(config.name, serverTools);\n\n      // Register all tools from this client\n      const tools = client.getAvailableTools();\n      const toolNames = client.getToolNames();\n\n      tools.forEach((tool, index) => {\n        const toolName = toolNames[index];\n\n        if (this.allTools.has(toolName)) {\n          logger.warn(\n            `Tool name collision: Tool '${toolName}' from server '${config.name}' is overwriting a previously registered tool.`\n          );\n        }\n\n        // Store in flattened map without prefix\n        this.allTools.set(toolName, tool);\n\n        // Store in server-specific map without prefix\n        serverTools.set(toolName, tool);\n      });\n\n      logger.info(`Registered ${tools.length} tools from ${config.name}`);\n    } catch (error) {\n      logger.error(\n        `Failed to initialize MCP client for ${config.name}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get all registered tools as a flattened object with prefixed names\n   */\n  getTools(): Record<string, Tool<z.ZodType>> {\n    const toolsObject: Record<string, Tool<z.ZodType>> = {};\n    this.allTools.forEach((tool, name) => {\n      toolsObject[name] = tool;\n    });\n    return toolsObject;\n  }\n\n  /**\n   * Get tools grouped by MCP server name\n   */\n  getToolsByServerMap(): Record<string, Record<string, Tool<z.ZodType>>> {\n    const serverToolsObject: Record<\n      string,\n      Record<string, Tool<z.ZodType>>\n    > = {};\n\n    this.toolsByServer.forEach((tools, serverName) => {\n      const toolsObject: Record<string, Tool<z.ZodType>> = {};\n      tools.forEach((tool, toolName) => {\n        toolsObject[toolName] = tool;\n      });\n      serverToolsObject[serverName] = toolsObject;\n    });\n\n    return serverToolsObject;\n  }\n\n  /**\n   * Get tools from a specific MCP server as objects\n   */\n  getServerTools(serverName: string): Record<string, Tool<z.ZodType>> {\n    const serverTools = this.toolsByServer.get(serverName);\n    if (!serverTools) {\n      return {};\n    }\n\n    const toolsObject: Record<string, Tool<z.ZodType>> = {};\n    serverTools.forEach((tool, toolName) => {\n      toolsObject[toolName] = tool;\n    });\n    return toolsObject;\n  }\n\n  /**\n   * Get tool names from a specific MCP server\n   */\n  getServerToolNames(serverName: string): string[] {\n    const serverTools = this.toolsByServer.get(serverName);\n    return serverTools ? Array.from(serverTools.keys()) : [];\n  }\n\n  /**\n   * Get a specific tool by name\n   */\n  getTool(name: string): Tool<z.ZodType> | undefined {\n    return this.allTools.get(name);\n  }\n\n  /**\n   * Get a specific tool from a specific server\n   */\n  getServerTool(\n    serverName: string,\n    toolName: string\n  ): Tool<z.ZodType> | undefined {\n    const serverTools = this.toolsByServer.get(serverName);\n    return serverTools?.get(toolName);\n  }\n\n  /**\n   * Check if a tool exists\n   */\n  hasTool(name: string): boolean {\n    return this.allTools.has(name);\n  }\n\n  /**\n   * Check if a server has a specific tool\n   */\n  hasServerTool(serverName: string, toolName: string): boolean {\n    const serverTools = this.toolsByServer.get(serverName);\n    return serverTools?.has(toolName) ?? false;\n  }\n\n  /**\n   * Get tool names\n   */\n  getToolNames(): string[] {\n    return Array.from(this.allTools.keys());\n  }\n\n  /**\n   * Get available MCP server names\n   */\n  getServerNames(): string[] {\n    return Array.from(this.toolsByServer.keys());\n  }\n\n  /**\n   * Get status of all MCP clients\n   */\n  getStatus(): Record<string, { connected: boolean; toolCount: number }> {\n    const status: Record<string, { connected: boolean; toolCount: number }> =\n      {};\n\n    this.configs.forEach(config => {\n      const client = this.clients.get(config.name);\n      const serverTools = this.toolsByServer.get(config.name);\n      status[config.name] = {\n        connected: !!client,\n        toolCount: serverTools ? serverTools.size : 0,\n      };\n    });\n\n    return status;\n  }\n\n  /**\n   * Set access token for all MCP clients that require authentication\n   */\n  setAccessTokenForAll(accessToken: string | null): void {\n    this.clients.forEach((client, serverName) => {\n      const config = this.configs.find(c => c.name === serverName);\n      if (config?.requiresAuth) {\n        client.setAccessToken(accessToken);\n      }\n    });\n  }\n\n  /**\n   * Set access token for a specific MCP server\n   */\n  setAccessTokenForServer(\n    serverName: string,\n    accessToken: string | null\n  ): void {\n    const client = this.clients.get(serverName);\n    if (client) {\n      client.setAccessToken(accessToken);\n    }\n  }\n\n  /**\n   * Get MCP client for a specific server (for direct access if needed)\n   */\n  getClient(serverName: string): McpClient | undefined {\n    return this.clients.get(serverName);\n  }\n}\n"],"names":[],"mappings":"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"}