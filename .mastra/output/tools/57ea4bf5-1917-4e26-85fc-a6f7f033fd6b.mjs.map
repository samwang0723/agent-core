{"version":3,"file":"57ea4bf5-1917-4e26-85fc-a6f7f033fd6b.mjs","sources":["../../../src/mastra/tools/registry.ts"],"sourcesContent":["import { Tool } from '@mastra/core';\nimport { McpClient } from './remote/mcp.service';\nimport logger from '../utils/logger';\nimport { mcpServers } from './remote/mcp.config';\nimport { z } from 'zod';\nimport { McpRegistry } from './remote/index';\nimport { localTools } from './local/index';\n\nclass ToolRegistry {\n  private mcpRegistry: McpRegistry;\n  private localTools: Record<string, Tool<z.ZodType>> = {};\n  private localToolNames: string[] = [];\n\n  constructor(tools: any[] = []) {\n    this.mcpRegistry = new McpRegistry(mcpServers);\n    this.registerLocalTools(tools);\n  }\n\n  private registerLocalTools(tools: any[]) {\n    tools.forEach(tool => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const toolId = (tool as any).id;\n      if (this.localTools[toolId]) {\n        logger.warn(\n          `Local tool with ID '${toolId}' is already registered. It will be overwritten.`\n        );\n      }\n      this.localTools[toolId] = tool;\n    });\n    this.localToolNames = Object.keys(this.localTools);\n  }\n\n  public async initializeTools() {\n    try {\n      // Automatically initialize all MCP servers\n      await this.mcpRegistry.initialize();\n\n      // Log comprehensive tool registry for LLM\n      // const toolsByServer = this.getToolsByServerMap();\n      const totalTools = this.getToolNames().length;\n      // logCompleteToolRegistryForLLM(toolsByServer, totalTools);\n\n      logger.info(\n        `Tool Registry initialized with ${totalTools} tools from ${this.getServerNames().join(\n          ', '\n        )}`\n      );\n    } catch (error) {\n      logger.error('Failed to initialize Tool Registry:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all registered tools as a flattened object with prefixed names\n   */\n  getTools(): Record<string, Tool<z.ZodType>> {\n    const remoteTools = this.mcpRegistry.getTools();\n    for (const name of this.localToolNames) {\n      if (remoteTools[name]) {\n        logger.warn(\n          `Local tool '${name}' is hiding a remote tool with the same name.`\n        );\n      }\n    }\n    return { ...remoteTools, ...this.localTools };\n  }\n\n  /**\n   * Get tools grouped by MCP server name\n   */\n  getToolsByServerMap(): Record<string, Record<string, Tool<z.ZodType>>> {\n    const serverMap = this.mcpRegistry.getToolsByServerMap();\n    if (this.localToolNames.length > 0) {\n      serverMap.local = this.localTools;\n    }\n    return serverMap;\n  }\n\n  /**\n   * Get tools from a specific MCP server\n   */\n  getServerTools(serverName: string): Record<string, Tool<z.ZodType>> {\n    if (serverName === 'local') {\n      return this.localTools;\n    }\n    return this.mcpRegistry.getServerTools(serverName);\n  }\n\n  /**\n   * Get tool names from a specific MCP server\n   */\n  getServerToolNames(serverName: string): string[] {\n    if (serverName === 'local') {\n      return this.localToolNames;\n    }\n    return this.mcpRegistry.getServerToolNames(serverName);\n  }\n\n  /**\n   * Get available MCP server names\n   */\n  getServerNames(): string[] {\n    const serverNames = this.mcpRegistry.getServerNames();\n    if (this.localToolNames.length > 0) {\n      return [...serverNames, 'local'];\n    }\n    return serverNames;\n  }\n\n  /**\n   * Get a specific tool by name\n   */\n  getTool(name: string): Tool<z.ZodType> | undefined {\n    return this.localTools[name] || this.mcpRegistry.getTool(name);\n  }\n\n  /**\n   * Get a specific tool from a specific server\n   */\n  getServerTool(\n    serverName: string,\n    toolName: string\n  ): Tool<z.ZodType> | undefined {\n    if (serverName === 'local') {\n      return this.localTools[toolName];\n    }\n    return this.mcpRegistry.getServerTool(serverName, toolName);\n  }\n\n  /**\n   * Check if a tool exists\n   */\n  hasTool(name: string): boolean {\n    return (\n      this.localTools.hasOwnProperty(name) || this.mcpRegistry.hasTool(name)\n    );\n  }\n\n  /**\n   * Check if a server has a specific tool\n   */\n  hasServerTool(serverName: string, toolName: string): boolean {\n    if (serverName === 'local') {\n      return this.localTools.hasOwnProperty(toolName);\n    }\n    return this.mcpRegistry.hasServerTool(serverName, toolName);\n  }\n\n  /**\n   * Get tool names\n   */\n  getToolNames(): string[] {\n    return Object.keys(this.getTools());\n  }\n\n  /**\n   * Get MCP server status\n   */\n  getStatus(): Record<string, { connected: boolean; toolCount: number }> {\n    const status = this.mcpRegistry.getStatus();\n    if (this.localToolNames.length > 0) {\n      status.local = {\n        connected: true,\n        toolCount: this.localToolNames.length,\n      };\n    }\n    return status;\n  }\n\n  /**\n   * Set access token for all MCP clients that require authentication\n   */\n  setAccessTokenForAll(accessToken: string | null): void {\n    this.mcpRegistry.setAccessTokenForAll(accessToken);\n  }\n\n  /**\n   * Set access token for a specific MCP server\n   */\n  setAccessTokenForServer(\n    serverName: string,\n    accessToken: string | null\n  ): void {\n    this.mcpRegistry.setAccessTokenForServer(serverName, accessToken);\n  }\n\n  /**\n   * Get MCP client for a specific server (for direct access if needed)\n   */\n  getClient(serverName: string): McpClient | undefined {\n    return this.mcpRegistry.getClient(serverName);\n  }\n}\n\n// Create and initialize the instance, then export it.\nconst toolRegistryInstance = new ToolRegistry(localTools);\nawait toolRegistryInstance.initializeTools();\nexport const toolRegistry = toolRegistryInstance;\n"],"names":[],"mappings":"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"}