{"version":3,"file":"4b7c11ce-976f-4ce0-bb3d-191d522ec9d4.mjs","sources":["../../../src/mastra/tools/remote/mcp.dto.ts"],"sourcesContent":["import { z } from 'zod';\nimport logger from '../../utils/logger';\n\nexport interface McpServerConfig {\n  name: string;\n  url: string;\n  healthUrl?: string;\n  enabled: boolean;\n  requiresAuth?: boolean; // Whether this MCP server requires authentication\n}\n\nexport interface McpTool {\n  name: string;\n  description: string;\n  inputSchema: JsonSchema;\n  requiresAuth?: boolean; // Whether this specific tool requires authentication\n}\n\nexport interface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: string | number | null;\n  result?: unknown;\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  };\n}\n\nexport interface ToolsListResult {\n  tools: McpTool[];\n}\n\nexport interface ToolCallResult {\n  content: {\n    type: string;\n    text: string;\n  }[];\n}\n\nexport interface JsonSchema {\n  type: string;\n  properties?: Record<string, JsonSchemaProperty>;\n  required?: string[];\n  description?: string;\n  items?: JsonSchema;\n  enum?: (string | number)[];\n}\n\nexport interface JsonSchemaProperty extends JsonSchema {\n  // Additional properties can be added here if needed\n}\n\ninterface ToolSchemaInfo {\n  name: string;\n  description: string;\n  parameters: JsonSchema;\n  server?: string;\n}\n\n/**\n * Extract JSON Schema-like structure from Zod schema\n */\nexport function extractZodSchema(zodSchema: z.ZodType): JsonSchema {\n  try {\n    // Handle ZodObject\n    if (zodSchema instanceof z.ZodObject) {\n      const shape = zodSchema.shape;\n      const properties: Record<string, JsonSchemaProperty> = {};\n      const required: string[] = [];\n\n      for (const [key, value] of Object.entries(shape)) {\n        const zodType = value as z.ZodType;\n        properties[key] = extractZodTypeInfo(zodType);\n\n        // Check if field is required (not optional)\n        if (!zodType.isOptional()) {\n          required.push(key);\n        }\n      }\n\n      return {\n        type: 'object',\n        properties,\n        required: required.length > 0 ? required : undefined,\n      };\n    }\n\n    // For other types, try to extract basic info\n    return extractZodTypeInfo(zodSchema);\n  } catch (error) {\n    logger.warn('Failed to extract Zod schema:', error);\n    return { type: 'unknown', description: 'Schema extraction failed' };\n  }\n}\n\n/**\n * Extract information from individual Zod types\n */\nfunction extractZodTypeInfo(zodType: z.ZodType): JsonSchemaProperty {\n  try {\n    // Get description if available\n    const description = zodType.description;\n\n    // Handle different Zod types\n    if (zodType instanceof z.ZodString) {\n      return { type: 'string', description };\n    }\n\n    if (zodType instanceof z.ZodNumber) {\n      return { type: 'number', description };\n    }\n\n    if (zodType instanceof z.ZodBoolean) {\n      return { type: 'boolean', description };\n    }\n\n    if (zodType instanceof z.ZodArray) {\n      return {\n        type: 'array',\n        items: extractZodTypeInfo(zodType.element),\n        description,\n      };\n    }\n\n    if (zodType instanceof z.ZodEnum) {\n      return {\n        type: 'string',\n        enum: zodType.options,\n        description,\n      };\n    }\n\n    if (zodType instanceof z.ZodOptional) {\n      return extractZodTypeInfo(zodType.unwrap());\n    }\n\n    if (zodType instanceof z.ZodObject) {\n      return extractZodSchema(zodType);\n    }\n\n    // Default fallback\n    return { type: 'any', description };\n  } catch (error) {\n    return {\n      type: 'unknown',\n      description: 'Type extraction failed',\n    };\n  }\n}\n\n/**\n * Log tool schema information in a format suitable for LLM consumption\n */\nexport function logToolSchemaForLLM(\n  toolName: string,\n  description: string,\n  parameters: z.ZodType,\n  server?: string,\n): void {\n  try {\n    const schemaInfo: ToolSchemaInfo = {\n      name: toolName,\n      description,\n      parameters: extractZodSchema(parameters),\n      ...(server && { server }),\n    };\n\n    logger.info(`ðŸ”§ Tool Schema Registered for LLM: ${toolName}`, {\n      toolSchema: schemaInfo,\n      readableFormat: {\n        name: toolName,\n        description,\n        server: server || 'unknown',\n        parameterSchema: JSON.stringify(schemaInfo.parameters, null, 2),\n      },\n    });\n  } catch (error) {\n    logger.error(`Failed to log schema for tool ${toolName}:`, error);\n  }\n}\n\n/**\n * Log multiple tool schemas for an agent\n */\nexport function logAgentToolSchemasForLLM(\n  agentName: string,\n  tools: Record<string, { description: string; parameters: z.ZodType }>,\n  serverName?: string,\n): void {\n  const toolSchemas: ToolSchemaInfo[] = [];\n\n  for (const [toolName, tool] of Object.entries(tools)) {\n    try {\n      const schemaInfo: ToolSchemaInfo = {\n        name: toolName,\n        description: tool.description,\n        parameters: extractZodSchema(tool.parameters),\n        ...(serverName && { server: serverName }),\n      };\n      toolSchemas.push(schemaInfo);\n    } catch (error) {\n      logger.warn(`Failed to extract schema for tool ${toolName}:`, error);\n    }\n  }\n\n  logger.info(`ðŸ¤– Agent Tool Schemas Registered for LLM: ${agentName}`, {\n    agentName,\n    serverName: serverName || 'multiple',\n    toolCount: toolSchemas.length,\n    toolSchemas,\n    summary: {\n      agentName,\n      availableTools: toolSchemas.map((t) => ({\n        name: t.name,\n        description: t.description,\n        hasParameters: Object.keys(t.parameters.properties || {}).length > 0,\n        requiredFields: t.parameters.required || [],\n      })),\n    },\n  });\n}\n\n/**\n * Create a comprehensive tool registry summary for LLM\n */\nexport function logCompleteToolRegistryForLLM(\n  toolsByServer: Record<\n    string,\n    Record<string, { description: string; parameters: z.ZodType }>\n  >,\n  totalToolCount: number,\n): void {\n  type ServerToolInfo = {\n    toolCount: number;\n    tools: ToolSchemaInfo[];\n  };\n\n  const registrySummary = {\n    totalTools: totalToolCount,\n    serverCount: Object.keys(toolsByServer).length,\n    toolsByServer: {} as Record<string, ServerToolInfo>,\n  };\n\n  for (const [serverName, tools] of Object.entries(toolsByServer)) {\n    const serverTools: ToolSchemaInfo[] = [];\n    for (const [toolName, tool] of Object.entries(tools)) {\n      try {\n        serverTools.push({\n          name: toolName,\n          description: tool.description,\n          parameters: extractZodSchema(tool.parameters),\n        });\n      } catch (error) {\n        logger.warn(\n          `Failed to process tool ${toolName} from ${serverName}:`,\n          error,\n        );\n      }\n    }\n    registrySummary.toolsByServer[serverName] = {\n      toolCount: serverTools.length,\n      tools: serverTools,\n    };\n  }\n\n  logger.info('ðŸŒŸ Complete Tool Registry for LLM Ready', {\n    registrySummary,\n    llmContext: {\n      message:\n        'All available tools have been registered and are ready for LLM consumption',\n      totalAvailableTools: totalToolCount,\n      serversWithTools: Object.keys(toolsByServer),\n      toolCategories: Object.entries(registrySummary.toolsByServer).map(\n        ([server, info]) => ({\n          server,\n          toolCount: info.toolCount,\n          capabilities: info.tools\n            .map((t: ToolSchemaInfo) => t.description)\n            .slice(0, 3), // Sample capabilities\n        }),\n      ),\n    },\n  });\n}\n"],"names":[],"mappings":"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"}