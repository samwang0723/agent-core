{"version":3,"file":"d52b35fe-d81f-4d7f-95fb-b0a582c91a9e.mjs","sources":["../../../src/mastra/tools/remote/mcp.service.ts"],"sourcesContent":["import { createTool, Tool, ToolExecutionContext } from '@mastra/core/tools';\nimport { z } from 'zod';\nimport logger from '../../utils/logger';\nimport {\n  McpServerConfig,\n  McpTool,\n  JsonRpcResponse,\n  ToolsListResult,\n  ToolCallResult,\n} from './mcp.dto';\nimport { JsonSchema } from './mcp.dto';\n\nexport class McpClient {\n  private sessionId: string | null = null;\n  private availableTools: McpTool[] = [];\n  private accessToken: string | null = null;\n\n  constructor(private config: McpServerConfig) {}\n\n  /**\n   * Set the OAuth access token for authenticated requests\n   */\n  setAccessToken(token: string | null): void {\n    this.accessToken = token;\n  }\n\n  async initialize(): Promise<void> {\n    if (!this.config.enabled) {\n      logger.info(`MCP server ${this.config.name} is disabled`);\n      return;\n    }\n\n    try {\n      await this.healthCheck();\n      await this.initializeSession();\n      await this.loadTools();\n      logger.info(\n        `MCP client for ${this.config.name} initialized with ${this.availableTools.length} tools`\n      );\n    } catch (error) {\n      logger.error(\n        `Failed to initialize MCP client for ${this.config.name}:`,\n        error\n      );\n      throw error;\n    }\n  }\n\n  private async healthCheck(): Promise<void> {\n    if (!this.config.healthUrl) return;\n\n    const response = await fetch(this.config.healthUrl, {\n      signal: AbortSignal.timeout(5000),\n    });\n    if (!response.ok) {\n      throw new Error(`Health check failed: ${response.status}`);\n    }\n  }\n\n  private async initializeSession(): Promise<void> {\n    // Match the exact format from the working test script\n    const response = await fetch(this.config.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json, text/event-stream',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 'init',\n        method: 'initialize',\n        params: {\n          protocolVersion: '2024-11-05',\n          capabilities: { tools: {} },\n          clientInfo: { name: 'agent-swarm', version: '1.0.0' },\n        },\n      }),\n    });\n    logger.info(`Session initialization request: ${this.config.url}`);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Session initialization failed: ${response.status} - ${errorText}`\n      );\n    }\n\n    // Get the full response text to extract session ID (like curl -i)\n    const responseText = await response.text();\n\n    // Extract session ID from headers (check both response headers and response text)\n    this.sessionId = response.headers.get('mcp-session-id');\n    if (!this.sessionId) {\n      // Try to extract from response text if it's in there\n      const sessionMatch = responseText.match(/mcp-session-id:\\s*([^\\s\\r\\n]+)/);\n      this.sessionId = sessionMatch ? sessionMatch[1].trim() : 'default';\n    }\n\n    logger.info(`MCP session initialized: ${this.sessionId}`);\n\n    // Send initialized notification (skip response handling for notification)\n    try {\n      await fetch(this.config.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json, text/event-stream',\n          'mcp-session-id': this.sessionId,\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'notifications/initialized',\n          params: {},\n        }),\n      });\n    } catch (error) {\n      logger.warn('Failed to send initialized notification:', error);\n      // Don't fail the whole initialization for this\n    }\n  }\n\n  private async loadTools(): Promise<void> {\n    const response = await fetch(this.config.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json, text/event-stream',\n        'mcp-session-id': this.sessionId!,\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'tools/list',\n        id: 'list-tools',\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Failed to list tools: ${response.status} - ${errorText}`\n      );\n    }\n\n    // Handle both JSON and SSE responses\n    const responseText = await response.text();\n    const result = this.parseResponse(responseText);\n\n    if (result.error) {\n      throw new Error(`Tools list error: ${result.error.message}`);\n    }\n\n    this.availableTools = (result.result as ToolsListResult)?.tools || [];\n\n    logger.info(\n      `Loaded ${this.availableTools.length} tools from ${this.config.name}:`,\n      this.availableTools.map(t => t.name)\n    );\n  }\n\n  async callTool(\n    name: string,\n    parameters: Record<string, unknown> | ToolExecutionContext<z.ZodType>,\n    requiresAuth?: boolean\n  ): Promise<unknown> {\n    if (!this.sessionId) {\n      throw new Error('MCP session not initialized');\n    }\n\n    // Check if authentication is required\n    const needsAuth =\n      requiresAuth ||\n      this.config.requiresAuth ||\n      this.availableTools.find(t => t.name === name)?.requiresAuth;\n\n    if (needsAuth && !this.accessToken) {\n      throw new Error(\n        `Tool '${name}' requires authentication but no access token provided`\n      );\n    }\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json, text/event-stream',\n      'mcp-session-id': this.sessionId,\n    };\n\n    // Add authorization header if needed\n    if (needsAuth && this.accessToken) {\n      headers['Authorization'] = `Bearer ${this.accessToken}`;\n    }\n\n    // Handle both raw parameters and ToolExecutionContext\n    const toolParameters =\n      'context' in parameters ? parameters.context : parameters;\n\n    const payload = {\n      jsonrpc: '2.0',\n      method: 'tools/call',\n      params: { name, arguments: toolParameters },\n      id: Date.now(),\n    };\n\n    try {\n      const startTime = Date.now();\n      logger.info(\n        `Calling tool ${name} with parameters: ${JSON.stringify(payload)}, headers: ${JSON.stringify(headers)}`\n      );\n      const response = await fetch(this.config.url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(payload),\n        signal: AbortSignal.timeout(\n          parseInt(process.env.MCP_TIMEOUT || '30000')\n        ),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        const errorMessage = `Tool call failed: ${response.status} ${response.statusText} - ${errorText}`;\n\n        throw new Error(errorMessage);\n      }\n\n      // Handle both JSON and SSE responses\n      const responseText = await response.text();\n\n      const result = this.parseResponse(responseText);\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      logger.info(\n        `Tool call result: ${JSON.stringify(result).slice(0, 200)}... in ${duration}ms`\n      );\n\n      if (result.error) {\n        const errorMessage = `Tool execution error: ${result.error.message}`;\n        throw new Error(errorMessage);\n      }\n\n      // Handle MCP response format\n      const toolCallResult = result.result as ToolCallResult;\n      if (toolCallResult?.content?.[0]?.type === 'text') {\n        const text = toolCallResult.content[0].text;\n        try {\n          return JSON.parse(text);\n        } catch {\n          return text;\n        }\n      }\n\n      return result.result;\n    } catch (error: unknown) {\n      if (\n        error instanceof Error &&\n        (error.name === 'TimeoutError' || error.name === 'AbortError')\n      ) {\n        const timeout = parseInt(process.env.MCP_TIMEOUT || '30000') / 1000;\n        const errorMessage = `The tool call to '${name}' timed out after ${timeout} seconds. Please try again later.`;\n\n        logger.error(errorMessage);\n        return {\n          error: errorMessage,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  getAvailableTools(): Tool<z.ZodType>[] {\n    return this.availableTools.map(mcpTool => {\n      const zodSchema = this.convertInputSchemaToZod(mcpTool.inputSchema);\n\n      return createTool({\n        id: mcpTool.name,\n        description: mcpTool.description,\n        inputSchema: zodSchema,\n        execute: async parameters => {\n          return await this.callTool(\n            mcpTool.name,\n            parameters,\n            mcpTool.requiresAuth\n          );\n        },\n      });\n    });\n  }\n\n  private convertInputSchemaToZod(schema: JsonSchema): z.ZodType {\n    if (!schema || !schema.type) {\n      // Return a default schema if the input is invalid\n      return z.any();\n    }\n\n    switch (schema.type) {\n      case 'object': {\n        const shape: z.ZodRawShape = {};\n        if (schema.properties) {\n          for (const key of Object.keys(schema.properties)) {\n            const prop = schema.properties[key];\n            let zodType = this.convertInputSchemaToZod(prop).describe(\n              prop.description || ''\n            );\n\n            if (!schema.required?.includes(key)) {\n              zodType = zodType.optional();\n            }\n            shape[key] = zodType;\n          }\n        }\n        return z.object(shape);\n      }\n      case 'string':\n        return z.string().describe(schema.description || '');\n      case 'number':\n      case 'integer':\n        return z.number().describe(schema.description || '');\n      case 'boolean':\n        return z.boolean().describe(schema.description || '');\n      case 'array':\n        if (schema.items) {\n          return z\n            .array(this.convertInputSchemaToZod(schema.items))\n            .describe(schema.description || '');\n        }\n        return z.array(z.any()).describe(schema.description || ''); // Fallback for arrays with no item schema\n      default:\n        return z.any(); // Fallback for unknown types\n    }\n  }\n\n  getToolNames(): string[] {\n    return this.availableTools.map(t => t.name);\n  }\n\n  private parseResponse(responseText: string): JsonRpcResponse {\n    try {\n      // Handle JSON-RPC response\n      if (responseText.trim().startsWith('{')) {\n        return JSON.parse(responseText);\n      }\n\n      // Handle Server-Sent Events (SSE) stream\n      const lines = responseText\n        .trim()\n        .split('\\n')\n        .filter(line => line.startsWith('data: '));\n\n      if (lines.length > 0) {\n        // In case of multiple data lines, we might need to decide how to handle them.\n        // For now, parsing the last one as it's most likely the final result.\n        const lastLine = lines[lines.length - 1];\n        const jsonData = lastLine.substring(5).trim();\n        return JSON.parse(jsonData);\n      }\n\n      // Fallback for unexpected format\n      throw new Error('Invalid response format');\n    } catch (error) {\n      logger.error('Failed to parse MCP response:', {\n        responseText,\n        error,\n      });\n      // Ensure a consistent error format\n      return {\n        jsonrpc: '2.0',\n        id: null,\n        error: {\n          code: -32700, // Parse error\n          message: 'Failed to parse response',\n          data: responseText,\n        },\n      };\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAYO,MAAM,SAAA,CAAU;AAAA,EAKrB,YAAoB,MAAA,EAAyB;AAAzB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA,EAA0B;AAAA,EAJtC,SAAA,GAA2B,IAAA;AAAA,EAC3B,iBAA4B,EAAC;AAAA,EAC7B,WAAA,GAA6B,IAAA;AAAA;AAAA;AAAA;AAAA,EAOrC,eAAe,KAAA,EAA4B;AACzC,IAAA,IAAA,CAAK,WAAA,GAAc,KAAA;AAAA,EACrB;AAAA,EAEA,MAAM,UAAA,GAA4B;AAChC,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,OAAA,EAAS;AACxB,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,WAAA,EAAc,IAAA,CAAK,MAAA,CAAO,IAAI,CAAA,YAAA,CAAc,CAAA;AACxD,MAAA;AAAA,IACF;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,KAAK,WAAA,EAAY;AACvB,MAAA,MAAM,KAAK,iBAAA,EAAkB;AAC7B,MAAA,MAAM,KAAK,SAAA,EAAU;AACrB,MAAA,MAAA,CAAO,IAAA;AAAA,QACL,kBAAkB,IAAA,CAAK,MAAA,CAAO,IAAI,CAAA,kBAAA,EAAqB,IAAA,CAAK,eAAe,MAAM,CAAA,MAAA;AAAA,OACnF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,MAAA,CAAO,KAAA;AAAA,QACL,CAAA,oCAAA,EAAuC,IAAA,CAAK,MAAA,CAAO,IAAI,CAAA,CAAA,CAAA;AAAA,QACvD;AAAA,OACF;AACA,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAc,WAAA,GAA6B;AACzC,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,SAAA,EAAW;AAE5B,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,IAAA,CAAK,OAAO,SAAA,EAAW;AAAA,MAClD,MAAA,EAAQ,WAAA,CAAY,OAAA,CAAQ,GAAI;AAAA,KACjC,CAAA;AACD,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qBAAA,EAAwB,QAAA,CAAS,MAAM,CAAA,CAAE,CAAA;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,MAAc,iBAAA,GAAmC;AAE/C,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,IAAA,CAAK,OAAO,GAAA,EAAK;AAAA,MAC5C,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA,EAAS;AAAA,QACP,cAAA,EAAgB,kBAAA;AAAA,QAChB,MAAA,EAAQ;AAAA,OACV;AAAA,MACA,IAAA,EAAM,KAAK,SAAA,CAAU;AAAA,QACnB,OAAA,EAAS,KAAA;AAAA,QACT,EAAA,EAAI,MAAA;AAAA,QACJ,MAAA,EAAQ,YAAA;AAAA,QACR,MAAA,EAAQ;AAAA,UACN,eAAA,EAAiB,YAAA;AAAA,UACjB,YAAA,EAAc,EAAE,KAAA,EAAO,EAAC,EAAE;AAAA,UAC1B,UAAA,EAAY,EAAE,IAAA,EAAM,aAAA,EAAe,SAAS,OAAA;AAAQ;AACtD,OACD;AAAA,KACF,CAAA;AACD,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,gCAAA,EAAmC,IAAA,CAAK,MAAA,CAAO,GAAG,CAAA,CAAE,CAAA;AAEhE,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,SAAA,GAAY,MAAM,QAAA,CAAS,IAAA,EAAK;AACtC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,+BAAA,EAAkC,QAAA,CAAS,MAAM,CAAA,GAAA,EAAM,SAAS,CAAA;AAAA,OAClE;AAAA,IACF;AAGA,IAAA,MAAM,YAAA,GAAe,MAAM,QAAA,CAAS,IAAA,EAAK;AAGzC,IAAA,IAAA,CAAK,SAAA,GAAY,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,gBAAgB,CAAA;AACtD,IAAA,IAAI,CAAC,KAAK,SAAA,EAAW;AAEnB,MAAA,MAAM,YAAA,GAAe,YAAA,CAAa,KAAA,CAAM,gCAAgC,CAAA;AACxE,MAAA,IAAA,CAAK,YAAY,YAAA,GAAe,YAAA,CAAa,CAAC,CAAA,CAAE,MAAK,GAAI,SAAA;AAAA,IAC3D;AAEA,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,yBAAA,EAA4B,IAAA,CAAK,SAAS,CAAA,CAAE,CAAA;AAGxD,IAAA,IAAI;AACF,MAAA,MAAM,KAAA,CAAM,IAAA,CAAK,MAAA,CAAO,GAAA,EAAK;AAAA,QAC3B,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA,EAAS;AAAA,UACP,cAAA,EAAgB,kBAAA;AAAA,UAChB,MAAA,EAAQ,qCAAA;AAAA,UACR,kBAAkB,IAAA,CAAK;AAAA,SACzB;AAAA,QACA,IAAA,EAAM,KAAK,SAAA,CAAU;AAAA,UACnB,OAAA,EAAS,KAAA;AAAA,UACT,MAAA,EAAQ,2BAAA;AAAA,UACR,QAAQ;AAAC,SACV;AAAA,OACF,CAAA;AAAA,IACH,SAAS,KAAA,EAAO;AACd,MAAA,MAAA,CAAO,IAAA,CAAK,4CAA4C,KAAK,CAAA;AAAA,IAE/D;AAAA,EACF;AAAA,EAEA,MAAc,SAAA,GAA2B;AACvC,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,IAAA,CAAK,OAAO,GAAA,EAAK;AAAA,MAC5C,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA,EAAS;AAAA,QACP,cAAA,EAAgB,kBAAA;AAAA,QAChB,MAAA,EAAQ,qCAAA;AAAA,QACR,kBAAkB,IAAA,CAAK;AAAA,OACzB;AAAA,MACA,IAAA,EAAM,KAAK,SAAA,CAAU;AAAA,QACnB,OAAA,EAAS,KAAA;AAAA,QACT,MAAA,EAAQ,YAAA;AAAA,QACR,EAAA,EAAI;AAAA,OACL;AAAA,KACF,CAAA;AAED,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,SAAA,GAAY,MAAM,QAAA,CAAS,IAAA,EAAK;AACtC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,sBAAA,EAAyB,QAAA,CAAS,MAAM,CAAA,GAAA,EAAM,SAAS,CAAA;AAAA,OACzD;AAAA,IACF;AAGA,IAAA,MAAM,YAAA,GAAe,MAAM,QAAA,CAAS,IAAA,EAAK;AACzC,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,aAAA,CAAc,YAAY,CAAA;AAE9C,IAAA,IAAI,OAAO,KAAA,EAAO;AAChB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kBAAA,EAAqB,MAAA,CAAO,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAAA,IAC7D;AAEA,IAAA,IAAA,CAAK,cAAA,GAAkB,MAAA,CAAO,MAAA,EAA4B,KAAA,IAAS,EAAC;AAEpE,IAAA,MAAA,CAAO,IAAA;AAAA,MACL,UAAU,IAAA,CAAK,cAAA,CAAe,MAAM,CAAA,YAAA,EAAe,IAAA,CAAK,OAAO,IAAI,CAAA,CAAA,CAAA;AAAA,MACnE,IAAA,CAAK,cAAA,CAAe,GAAA,CAAI,CAAA,CAAA,KAAK,EAAE,IAAI;AAAA,KACrC;AAAA,EACF;AAAA,EAEA,MAAM,QAAA,CACJ,IAAA,EACA,UAAA,EACA,YAAA,EACkB;AAClB,IAAA,IAAI,CAAC,KAAK,SAAA,EAAW;AACnB,MAAA,MAAM,IAAI,MAAM,6BAA6B,CAAA;AAAA,IAC/C;AAGA,IAAA,MAAM,SAAA,GACJ,YAAA,IACA,IAAA,CAAK,MAAA,CAAO,YAAA,IACZ,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,CAAA,CAAA,KAAK,CAAA,CAAE,IAAA,KAAS,IAAI,CAAA,EAAG,YAAA;AAElD,IAAA,IAAI,SAAA,IAAa,CAAC,IAAA,CAAK,WAAA,EAAa;AAClC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,SAAS,IAAI,CAAA,sDAAA;AAAA,OACf;AAAA,IACF;AAEA,IAAA,MAAM,OAAA,GAAkC;AAAA,MACtC,cAAA,EAAgB,kBAAA;AAAA,MAChB,MAAA,EAAQ,qCAAA;AAAA,MACR,kBAAkB,IAAA,CAAK;AAAA,KACzB;AAGA,IAAA,IAAI,SAAA,IAAa,KAAK,WAAA,EAAa;AACjC,MAAA,OAAA,CAAQ,eAAe,CAAA,GAAI,CAAA,OAAA,EAAU,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,IACvD;AAGA,IAAA,MAAM,cAAA,GACJ,SAAA,IAAa,UAAA,GAAa,UAAA,CAAW,OAAA,GAAU,UAAA;AAEjD,IAAA,MAAM,OAAA,GAAU;AAAA,MACd,OAAA,EAAS,KAAA;AAAA,MACT,MAAA,EAAQ,YAAA;AAAA,MACR,MAAA,EAAQ,EAAE,IAAA,EAAM,SAAA,EAAW,cAAA,EAAe;AAAA,MAC1C,EAAA,EAAI,KAAK,GAAA;AAAI,KACf;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAC3B,MAAA,MAAA,CAAO,IAAA;AAAA,QACL,CAAA,aAAA,EAAgB,IAAI,CAAA,kBAAA,EAAqB,IAAA,CAAK,SAAA,CAAU,OAAO,CAAC,CAAA,WAAA,EAAc,IAAA,CAAK,SAAA,CAAU,OAAO,CAAC,CAAA;AAAA,OACvG;AACA,MAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,IAAA,CAAK,OAAO,GAAA,EAAK;AAAA,QAC5C,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA;AAAA,QACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,OAAO,CAAA;AAAA,QAC5B,QAAQ,WAAA,CAAY,OAAA;AAAA,UAClB,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,WAAA,IAAe,OAAO;AAAA;AAC7C,OACD,CAAA;AAED,MAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,QAAA,MAAM,SAAA,GAAY,MAAM,QAAA,CAAS,IAAA,EAAK;AACtC,QAAA,MAAM,YAAA,GAAe,qBAAqB,QAAA,CAAS,MAAM,IAAI,QAAA,CAAS,UAAU,MAAM,SAAS,CAAA,CAAA;AAE/F,QAAA,MAAM,IAAI,MAAM,YAAY,CAAA;AAAA,MAC9B;AAGA,MAAA,MAAM,YAAA,GAAe,MAAM,QAAA,CAAS,IAAA,EAAK;AAEzC,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,aAAA,CAAc,YAAY,CAAA;AAC9C,MAAA,MAAM,OAAA,GAAU,KAAK,GAAA,EAAI;AACzB,MAAA,MAAM,WAAW,OAAA,GAAU,SAAA;AAC3B,MAAA,MAAA,CAAO,IAAA;AAAA,QACL,CAAA,kBAAA,EAAqB,IAAA,CAAK,SAAA,CAAU,MAAM,CAAA,CAAE,MAAM,CAAA,EAAG,GAAG,CAAC,CAAA,OAAA,EAAU,QAAQ,CAAA,EAAA;AAAA,OAC7E;AAEA,MAAA,IAAI,OAAO,KAAA,EAAO;AAChB,QAAA,MAAM,YAAA,GAAe,CAAA,sBAAA,EAAyB,MAAA,CAAO,KAAA,CAAM,OAAO,CAAA,CAAA;AAClE,QAAA,MAAM,IAAI,MAAM,YAAY,CAAA;AAAA,MAC9B;AAGA,MAAA,MAAM,iBAAiB,MAAA,CAAO,MAAA;AAC9B,MAAA,IAAI,cAAA,EAAgB,OAAA,GAAU,CAAC,CAAA,EAAG,SAAS,MAAA,EAAQ;AACjD,QAAA,MAAM,IAAA,GAAO,cAAA,CAAe,OAAA,CAAQ,CAAC,CAAA,CAAE,IAAA;AACvC,QAAA,IAAI;AACF,UAAA,OAAO,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,QACxB,CAAA,CAAA,MAAQ;AACN,UAAA,OAAO,IAAA;AAAA,QACT;AAAA,MACF;AAEA,MAAA,OAAO,MAAA,CAAO,MAAA;AAAA,IAChB,SAAS,KAAA,EAAgB;AACvB,MAAA,IACE,iBAAiB,KAAA,KAChB,KAAA,CAAM,SAAS,cAAA,IAAkB,KAAA,CAAM,SAAS,YAAA,CAAA,EACjD;AACA,QAAA,MAAM,UAAU,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,WAAA,IAAe,OAAO,CAAA,GAAI,GAAA;AAC/D,QAAA,MAAM,YAAA,GAAe,CAAA,kBAAA,EAAqB,IAAI,CAAA,kBAAA,EAAqB,OAAO,CAAA,iCAAA,CAAA;AAE1E,QAAA,MAAA,CAAO,MAAM,YAAY,CAAA;AACzB,QAAA,OAAO;AAAA,UACL,KAAA,EAAO;AAAA,SACT;AAAA,MACF;AAEA,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF;AAAA,EAEA,iBAAA,GAAuC;AACrC,IAAA,OAAO,IAAA,CAAK,cAAA,CAAe,GAAA,CAAI,CAAA,OAAA,KAAW;AACxC,MAAA,MAAM,SAAA,GAAY,IAAA,CAAK,uBAAA,CAAwB,OAAA,CAAQ,WAAW,CAAA;AAElE,MAAA,OAAO,UAAA,CAAW;AAAA,QAChB,IAAI,OAAA,CAAQ,IAAA;AAAA,QACZ,aAAa,OAAA,CAAQ,WAAA;AAAA,QACrB,WAAA,EAAa,SAAA;AAAA,QACb,OAAA,EAAS,OAAM,UAAA,KAAc;AAC3B,UAAA,OAAO,MAAM,IAAA,CAAK,QAAA;AAAA,YAChB,OAAA,CAAQ,IAAA;AAAA,YACR,UAAA;AAAA,YACA,OAAA,CAAQ;AAAA,WACV;AAAA,QACF;AAAA,OACD,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH;AAAA,EAEQ,wBAAwB,MAAA,EAA+B;AAC7D,IAAA,IAAI,CAAC,MAAA,IAAU,CAAC,MAAA,CAAO,IAAA,EAAM;AAE3B,MAAA,OAAO,EAAE,GAAA,EAAI;AAAA,IACf;AAEA,IAAA,QAAQ,OAAO,IAAA;AAAM,MACnB,KAAK,QAAA,EAAU;AACb,QAAA,MAAM,QAAuB,EAAC;AAC9B,QAAA,IAAI,OAAO,UAAA,EAAY;AACrB,UAAA,KAAA,MAAW,GAAA,IAAO,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,UAAU,CAAA,EAAG;AAChD,YAAA,MAAM,IAAA,GAAO,MAAA,CAAO,UAAA,CAAW,GAAG,CAAA;AAClC,YAAA,IAAI,OAAA,GAAU,IAAA,CAAK,uBAAA,CAAwB,IAAI,CAAA,CAAE,QAAA;AAAA,cAC/C,KAAK,WAAA,IAAe;AAAA,aACtB;AAEA,YAAA,IAAI,CAAC,MAAA,CAAO,QAAA,EAAU,QAAA,CAAS,GAAG,CAAA,EAAG;AACnC,cAAA,OAAA,GAAU,QAAQ,QAAA,EAAS;AAAA,YAC7B;AACA,YAAA,KAAA,CAAM,GAAG,CAAA,GAAI,OAAA;AAAA,UACf;AAAA,QACF;AACA,QAAA,OAAO,CAAA,CAAE,OAAO,KAAK,CAAA;AAAA,MACvB;AAAA,MACA,KAAK,QAAA;AACH,QAAA,OAAO,EAAE,MAAA,EAAO,CAAE,QAAA,CAAS,MAAA,CAAO,eAAe,EAAE,CAAA;AAAA,MACrD,KAAK,QAAA;AAAA,MACL,KAAK,SAAA;AACH,QAAA,OAAO,EAAE,MAAA,EAAO,CAAE,QAAA,CAAS,MAAA,CAAO,eAAe,EAAE,CAAA;AAAA,MACrD,KAAK,SAAA;AACH,QAAA,OAAO,EAAE,OAAA,EAAQ,CAAE,QAAA,CAAS,MAAA,CAAO,eAAe,EAAE,CAAA;AAAA,MACtD,KAAK,OAAA;AACH,QAAA,IAAI,OAAO,KAAA,EAAO;AAChB,UAAA,OAAO,CAAA,CACJ,KAAA,CAAM,IAAA,CAAK,uBAAA,CAAwB,MAAA,CAAO,KAAK,CAAC,CAAA,CAChD,QAAA,CAAS,MAAA,CAAO,WAAA,IAAe,EAAE,CAAA;AAAA,QACtC;AACA,QAAA,OAAO,CAAA,CAAE,MAAM,CAAA,CAAE,GAAA,EAAK,CAAA,CAAE,QAAA,CAAS,MAAA,CAAO,WAAA,IAAe,EAAE,CAAA;AAAA;AAAA,MAC3D;AACE,QAAA,OAAO,EAAE,GAAA,EAAI;AAAA;AACjB,EACF;AAAA,EAEA,YAAA,GAAyB;AACvB,IAAA,OAAO,IAAA,CAAK,cAAA,CAAe,GAAA,CAAI,CAAA,CAAA,KAAK,EAAE,IAAI,CAAA;AAAA,EAC5C;AAAA,EAEQ,cAAc,YAAA,EAAuC;AAC3D,IAAA,IAAI;AAEF,MAAA,IAAI,YAAA,CAAa,IAAA,EAAK,CAAE,UAAA,CAAW,GAAG,CAAA,EAAG;AACvC,QAAA,OAAO,IAAA,CAAK,MAAM,YAAY,CAAA;AAAA,MAChC;AAGA,MAAA,MAAM,KAAA,GAAQ,YAAA,CACX,IAAA,EAAK,CACL,KAAA,CAAM,IAAI,CAAA,CACV,MAAA,CAAO,CAAA,IAAA,KAAQ,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAC,CAAA;AAE3C,MAAA,IAAI,KAAA,CAAM,SAAS,CAAA,EAAG;AAGpB,QAAA,MAAM,QAAA,GAAW,KAAA,CAAM,KAAA,CAAM,MAAA,GAAS,CAAC,CAAA;AACvC,QAAA,MAAM,QAAA,GAAW,QAAA,CAAS,SAAA,CAAU,CAAC,EAAE,IAAA,EAAK;AAC5C,QAAA,OAAO,IAAA,CAAK,MAAM,QAAQ,CAAA;AAAA,MAC5B;AAGA,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA,IAC3C,SAAS,KAAA,EAAO;AACd,MAAA,MAAA,CAAO,MAAM,+BAAA,EAAiC;AAAA,QAC5C,YAAA;AAAA,QACA;AAAA,OACD,CAAA;AAED,MAAA,OAAO;AAAA,QACL,OAAA,EAAS,KAAA;AAAA,QACT,EAAA,EAAI,IAAA;AAAA,QACJ,KAAA,EAAO;AAAA,UACL,IAAA,EAAM,MAAA;AAAA;AAAA,UACN,OAAA,EAAS,0BAAA;AAAA,UACT,IAAA,EAAM;AAAA;AACR,OACF;AAAA,IACF;AAAA,EACF;AACF;;;;"}