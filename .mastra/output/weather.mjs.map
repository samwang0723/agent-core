{"version":3,"file":"weather.mjs","sources":["../../src/mastra/workflows/weather.ts","../../src/mastra/tools/local/weather.ts"],"sourcesContent":["import { createStep, createWorkflow } from '@mastra/core/workflows';\nimport { z } from 'zod';\n\nexport const forecastSchema = z.object({\n  date: z.string(),\n  maxTemp: z.number(),\n  minTemp: z.number(),\n  precipitationChance: z.number(),\n  condition: z.string(),\n  location: z.string(),\n});\n\nfunction getWeatherCondition(code: number): string {\n  const conditions: Record<number, string> = {\n    0: 'Clear sky',\n    1: 'Mainly clear',\n    2: 'Partly cloudy',\n    3: 'Overcast',\n    45: 'Foggy',\n    48: 'Depositing rime fog',\n    51: 'Light drizzle',\n    53: 'Moderate drizzle',\n    55: 'Dense drizzle',\n    61: 'Slight rain',\n    63: 'Moderate rain',\n    65: 'Heavy rain',\n    71: 'Slight snow fall',\n    73: 'Moderate snow fall',\n    75: 'Heavy snow fall',\n    95: 'Thunderstorm',\n  };\n  return conditions[code] || 'Unknown';\n}\n\nexport const fetchWeatherWithSuspend = createStep({\n  id: 'fetch-weather',\n  description: 'Fetches weather forecast for a given city',\n  inputSchema: z.object({}),\n  resumeSchema: z.object({\n    city: z.string().describe('The city to get the weather for'),\n  }),\n  outputSchema: forecastSchema,\n  execute: async ({ resumeData, suspend }) => {\n    if (!resumeData) {\n      return suspend({\n        message: 'Please enter the city to get the weather for',\n      });\n    }\n\n    const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(\n      resumeData.city\n    )}&count=1`;\n    const geocodingResponse = await fetch(geocodingUrl);\n    const geocodingData = (await geocodingResponse.json()) as {\n      results: { latitude: number; longitude: number; name: string }[];\n    };\n\n    if (!geocodingData.results?.[0]) {\n      throw new Error(`Location '${resumeData.city}' not found`);\n    }\n\n    const { latitude, longitude, name } = geocodingData.results[0];\n\n    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=precipitation,weathercode&timezone=auto,&hourly=precipitation_probability,temperature_2m`;\n    const response = await fetch(weatherUrl);\n    const data = (await response.json()) as {\n      current: {\n        time: string;\n        precipitation: number;\n        weathercode: number;\n      };\n      hourly: {\n        precipitation_probability: number[];\n        temperature_2m: number[];\n      };\n    };\n\n    const forecast = {\n      date: new Date().toISOString(),\n      maxTemp: Math.max(...data.hourly.temperature_2m),\n      minTemp: Math.min(...data.hourly.temperature_2m),\n      condition: getWeatherCondition(data.current.weathercode),\n      precipitationChance: data.hourly.precipitation_probability.reduce(\n        (acc, curr) => Math.max(acc, curr),\n        0\n      ),\n      location: resumeData.city,\n    };\n\n    return forecast;\n  },\n});\n\nexport const weatherWorkflowWithSuspend = createWorkflow({\n  id: 'weather-workflow-with-suspend',\n  inputSchema: z.object({}),\n  outputSchema: forecastSchema,\n})\n  .then(fetchWeatherWithSuspend)\n  .commit();\n","import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\nimport {\n  forecastSchema,\n  weatherWorkflowWithSuspend,\n} from '../../workflows/weather';\n\nexport const startWeatherTool = createTool({\n  id: 'start-weather-tool',\n  description: 'Start the weather tool',\n  inputSchema: z.object({}),\n  outputSchema: z.object({\n    runId: z.string(),\n  }),\n  execute: async ({ context }) => {\n    const run = await weatherWorkflowWithSuspend.createRunAsync();\n    await run.start({\n      inputData: {},\n    });\n\n    return {\n      runId: run.runId,\n    };\n  },\n});\n\nexport const resumeWeatherTool = createTool({\n  id: 'resume-weather-tool',\n  description: 'Resume the weather tool',\n  inputSchema: z.object({\n    runId: z.string(),\n    city: z.string().describe('City name'),\n  }),\n  outputSchema: forecastSchema,\n  execute: async ({ context }) => {\n    const run = await weatherWorkflowWithSuspend.createRunAsync({\n      runId: context.runId,\n    });\n    const result = await run.resume({\n      step: 'fetch-weather',\n      resumeData: {\n        city: context.city,\n      },\n    });\n    switch (result.status) {\n      case 'success':\n        return result.result as z.infer<typeof forecastSchema>;\n      case 'failed':\n        throw result.error;\n      default:\n        throw new Error(`Unexpected workflow status: ${result.status}`);\n    }\n  },\n});\n"],"names":[],"mappings":"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"}