{"version":3,"file":"server-config.mjs","sources":["../../src/mastra/auth/google.ts","../../src/mastra/index.ts"],"sourcesContent":["import { googleAuth } from \"@hono/oauth-providers/google\";\n\nexport const googleAuthMiddleware = googleAuth({\n  client_id: process.env.GOOGLE_CLIENT_ID!,\n  client_secret: process.env.GOOGLE_CLIENT_SECRET!,\n  scope: [\n    \"https://www.googleapis.com/auth/gmail.readonly\",\n    \"https://www.googleapis.com/auth/userinfo.email\",\n    \"https://www.googleapis.com/auth/userinfo.profile\",\n    \"https://www.googleapis.com/auth/calendar\",\n  ],\n  redirect_uri: process.env.GOOGLE_REDIRECT_URI!,\n  access_type: \"offline\",\n  prompt: \"consent\",\n  state: \"agent-auth\", // CSRF protection\n});\n","import { Mastra } from \"@mastra/core\";\nimport { weatherAgentWithWorkflow } from \"./agents/weather\";\nimport { weatherWorkflowWithSuspend } from \"./workflows/weather\";\nimport { googleAuthMiddleware } from \"./auth\";\nimport { registerApiRoute } from \"@mastra/core/server\";\n\nexport const mastra: Mastra = new Mastra({\n  server: {\n    port: 3000, // Defaults to 4111\n    timeout: 10000, // Defaults to 30000 (30s)\n    cors: {\n      origin: [\"*\"], // Allow specific origins or '*' for all\n      allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n      allowHeaders: [\"Content-Type\", \"Authorization\"],\n      credentials: false,\n    },\n    middleware: [\n      {\n        handler: googleAuthMiddleware,\n        path: \"/api/*\", // Protect all /api endpoints\n      },\n      // Add a global request logger\n      async (c, next) => {\n        console.log(`${c.req.method} ${c.req.url}`);\n        await next();\n      },\n    ],\n    apiRoutes: [\n      registerApiRoute(\"/auth/google\", {\n        method: \"GET\",\n        middleware: [googleAuthMiddleware],\n        handler: async (c) => {\n          const token = c.get(\"token\");\n          const grantedScopes = c.get(\"granted-scopes\");\n          const user = c.get(\"user-google\");\n\n          return c.json({\n            token,\n            grantedScopes,\n            user,\n          });\n        },\n      }),\n    ],\n  },\n  agents: { weatherAgentWithWorkflow },\n  workflows: { weatherWorkflowWithSuspend },\n});\n"],"names":[],"mappings":";;;AAEO,MAAM,uBAAuB,UAAA,CAAW;AAAA,EAC7C,SAAA,EAAW,QAAQ,GAAA,CAAI,gBAAA;AAAA,EACvB,aAAA,EAAe,QAAQ,GAAA,CAAI,oBAAA;AAAA,EAC3B,KAAA,EAAO;AAAA,IACL,gDAAA;AAAA,IACA,gDAAA;AAAA,IACA,kDAAA;AAAA,IACA;AAAA,GACF;AAAA,EACA,YAAA,EAAc,QAAQ,GAAA,CAAI,mBAAA;AAAA,EAC1B,WAAA,EAAa,SAAA;AAAA,EACb,MAAA,EAAQ,SAAA;AAAA,EACR,KAAA,EAAO;AAAA;AACT,CAAC,CAAA;;ACRS,MACN,MAAA,GAAA;AAAA,EAAA,IAAA,EAAA,GAAA;AAAA;AAAA,EACA,OAAA,EAAA,GAAA;AAAA;AAAA,EACA,IAAA,EAAM;AAAA,IACK,MAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AAAA,IAC+C,cACxD,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAe,UAAgB,SAAA,CAAA;AAAA,IAAe,YAAA,EAC9C,CAAA,cAAA,EAAA,eAAA,CAAA;AAAA,IAAa,WAAA,EAAA;AAAA,GACf;AAAA,EACA,UAAA,EAAA;AAAA,IAAA;AAAA,MAAA,OAAA,EAAY,oBAAA;AAAA,MACV,IAAA,EAAA;AAAA;AAAA,KACE;AAAA;AAAA,IACM,OACR,YAAA;AAAA,MAAA,OAAA,CAAA,GAAA,CAEA,KAAU,GAAA,CAAA,UAAS,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACjB,MAAA,MAAA,IAAA,EAAA;AAAA,IAAA;AAAA,GAAA;AAAA,EACA,SAAA,EAAA,CAAA,gBAAA,CAAA,cAAA,EAAA;AAAA,IAAW,MAAA,EAAA,KAAA;AAAA,IAEf,UAAA,EAAA,CAAA,oBAAA,CAAA;AAAA,IACA,OAAA,EAAA,OAAW,CAAA,KAAA;AAAA,MAAA,MAAA,KAAA,SACQ,OAAA,CAAA;AAAgB,MAAA,MAC/B,aAAA,GAAQ,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA;AAAA,MAAA,MACR,IAAA,GAAA,CAAA,CAAA,GAAA,CAAA,aAAa,CAAA;AAAoB,MAAA,OACjC,EAAA,IAAA;QACE,KAAA;AAAA,QACA,aAAA;AAAA,QACA;AAAA,OAAA,CAAA;AAAA,IAEA;AAAA,GAAc,CACZ;AAAA;;;;"}