{"version":3,"file":"server-config.mjs","sources":["../../src/mastra/auth/google.ts","../../src/mastra/utils/logger.ts","../../src/mastra/index.ts"],"sourcesContent":["import { googleAuth } from \"@hono/oauth-providers/google\";\n\nexport const googleAuthMiddleware = googleAuth({\n  client_id: process.env.GOOGLE_CLIENT_ID!,\n  client_secret: process.env.GOOGLE_CLIENT_SECRET!,\n  scope: [\n    \"https://www.googleapis.com/auth/gmail.readonly\",\n    \"https://www.googleapis.com/auth/userinfo.email\",\n    \"https://www.googleapis.com/auth/userinfo.profile\",\n    \"https://www.googleapis.com/auth/calendar\",\n  ],\n  redirect_uri: process.env.GOOGLE_REDIRECT_URI!,\n  access_type: \"offline\",\n  prompt: \"consent\",\n  state: \"agent-auth\", // CSRF protection\n});\n","import { IMastraLogger, LoggerTransport, LogLevel } from '@mastra/core/logger';\nimport winston from 'winston';\n\nconst winstonLogger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.printf(({ timestamp, level, message, ...rest }) => {\n      const args = Object.keys(rest).length\n        ? JSON.stringify(rest, null, 2)\n        : '';\n      return `${timestamp} ${level}: ${message} ${args}`;\n    }),\n  ),\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.printf(({ timestamp, level, message, ...rest }) => {\n          let args = '';\n          if (typeof message === 'object') {\n            args = JSON.stringify(message, null, 2);\n            message = '';\n          }\n          const extraArgs = Object.keys(rest).length\n            ? JSON.stringify(rest, null, 2)\n            : '';\n          return `${timestamp} ${level}: ${message} ${args} ${extraArgs}`.trim();\n        }),\n      ),\n    }),\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\nconst logger: IMastraLogger = {\n  info: (message: string, ...args: any[]) => winstonLogger.info(message, ...args),\n  warn: (message: string, ...args: any[]) => winstonLogger.warn(message, ...args),\n  error: (message: string | Error, ...args: any[]) => {\n    if (message instanceof Error) {\n      winstonLogger.error(message.message, message, ...args);\n    } else {\n      winstonLogger.error(message, ...args);\n    }\n  },\n  debug: (message: string, ...args: any[]) => winstonLogger.debug(message, ...args),\n  getTransports: (): Map<string, LoggerTransport> => {\n    return new Map<string, LoggerTransport>();\n  },\n  trackException: (error: {\n    originalError?: Error;\n    message: string;\n    properties?: { [key: string]: any };\n    measurements?: { [key: string]: number };\n  }) => {\n    const err = error.originalError || new Error(error.message);\n    winstonLogger.error(err.message, {\n      stack: err.stack,\n      properties: error.properties,\n      measurements: error.measurements,\n    });\n  },\n  getLogs: async (\n    transportId: string,\n    params?: {\n      fromDate?: Date;\n      toDate?: Date;\n      logLevel?: LogLevel;\n      filters?: Record<string, any>;\n      page?: number;\n      perPage?: number;\n    },\n  ): Promise<{\n    logs: any[];\n    total: number;\n    page: number;\n    perPage: number;\n    hasMore: boolean;\n  }> => {\n    console.log(`Getting logs for transport: ${transportId} with params:`, params);\n    return {\n      logs: [],\n      total: 0,\n      page: params?.page || 1,\n      perPage: params?.perPage || 10,\n      hasMore: false,\n    };\n  },\n  getLogsByRunId: async (args: {\n    transportId: string;\n    runId: string;\n    fromDate?: Date;\n    toDate?: Date;\n    logLevel?: LogLevel;\n    filters?: Record<string, any>;\n    page?: number;\n    perPage?: number;\n  }): Promise<{\n    logs: any[];\n    total: number;\n    page: number;\n    perPage: number;\n    hasMore: boolean;\n  }> => {\n    console.log(`Getting logs for runId: ${args.runId} with params:`, args);\n    return {\n      logs: [],\n      total: 0,\n      page: args.page || 1,\n      perPage: args.perPage || 10,\n      hasMore: false,\n    };\n  },\n};\n\nexport default logger;\n","import { Mastra } from \"@mastra/core\";\nimport { weatherAgentWithWorkflow, webSearchAgent } from \"./agents/index\";\nimport { weatherWorkflowWithSuspend } from \"./workflows/weather\";\nimport { googleAuthMiddleware } from \"./auth\";\nimport { registerApiRoute } from \"@mastra/core/server\";\nimport logger from \"./utils/logger\";\n\nexport const mastra: Mastra = new Mastra({\n  logger: logger,\n  server: {\n    port: 3000, // Defaults to 4111\n    timeout: 10000, // Defaults to 30000 (30s)\n    cors: {\n      origin: [\"*\"], // Allow specific origins or '*' for all\n      allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n      allowHeaders: [\"Content-Type\", \"Authorization\"],\n      credentials: false,\n    },\n    middleware: [\n      // Add a global request logger\n      async (c, next) => {\n        logger.debug(`${c.req.method} ${c.req.url}`);\n        await next();\n      },\n    ],\n    apiRoutes: [\n      registerApiRoute(\"/auth/google\", {\n        method: \"GET\",\n        middleware: [googleAuthMiddleware],\n        handler: async (c) => {\n          const token = c.get(\"token\");\n          const grantedScopes = c.get(\"granted-scopes\");\n          const user = c.get(\"user-google\");\n\n          return c.json({\n            token,\n            grantedScopes,\n            user,\n          });\n        },\n      }),\n    ],\n  },\n  agents: { weatherAgentWithWorkflow, webSearchAgent },\n  workflows: { weatherWorkflowWithSuspend },\n});\n"],"names":[],"mappings":"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"}